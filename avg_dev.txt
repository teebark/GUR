create or replace PACKAGE BODY                                                                                                                                                                                                                                                    PKG_AVERAGE_RESERVE as    
PROCEDURE process_avg_rsrv_rcrds_btch (parm_targets IN gurowner.avg_targets%rowtype, 
  account_date in Date, parm_runid in varchar2, parmbuf out varchar2, parmcode out varchar2,
  limit_in IN PLS_INTEGER DEFAULT 200)
  is
  /*------------------------------------------------------------
  Stored procedure for Ground Up Reserving, Average process.
  This is a subroutine, called by process_avg_rsrv_rcrds.
  Input table is from Data Migrator, which converts the pending
  claims mainframe file to a table for processing here.
  Bulk collection is used instead of select/fetch as it's more
  efficient for large tables. As bulk collection can create 
  memory problems, smaller numbers of rows are read at a time to 
  alleviate this problem. The number of rows processed at a time
  is determined by the value for limit_in.
  The code is executed multiple times, using avg_targets as
  a driver. 
  Each row of the targets table executes the complete code.
  
  Parms:
  1. parm_targets--a targets row, passed from process_avg_rsrv_rcrds.
  2. account_date--as of processing date, passed from process_avg_rsrv_rcrds.
  3. parmbuf--return error message to process_avg_rsrv_rcrds.
  4. parmcode--return error code to process_avg_rsrv_rcrds.
  5. limit_in--a value for the   number of records that cursor c1 uses for each
     bulk collection. Defaults to 100.
     
  Input:
  1. Pending claims table, via Data Migrator and the main program, 
     process_avg_rsrv_rcrd.
  2. avg_targets--this is the driver table for executing the code. The data
     from this table is passed through a parm from process_avg_rsrv_rcrds.
  3. The 9 common grouping tables--for determing what rows to process, plus
     one more, clm_smbl_grp, specific to avg calculations.
  4. avg_severity--for computing adjustment values.
  
  Output:
  1. avg_adj_run--one row is created for each avg_targets row. It
     contains an ID column as a parent key for the avg_adjstmnts
     table. The ID key is generated by an Oracle sequence table.
  2. avg_adjstmnts_dups--output table for all input rows processed. This table will
     contain duplicate records, which are accumulated in the parent program.
     
  Program logic:
  1. User cursor c2 to read the driver table, avg_targets.
  2. For each row of avg_targets, call procedure process_avg_rsv_rcrds.btch.
     Use cursor c1 to process each row selected by the grouping
     tables.
  3. Call c1 two times--the first time to get summaries, the 
     second time to compute the spread and create the output 
     table.
  4. If there are more rows in avg_targets to process, loop
     again, starting at #1, until there are no more rows.
  ----------------------------------------------------------
  Changed       By               Description
  ---------- -------- --------------------------------------
  2016/3/30   T.Barker Added new balance table and balance
                      processing.
  ----------------------------------------------------------
  For use in a bulk select, create associative arrays. There is 
  one of these for each column in the input rows, plus one for
  a computed field, feat_cnt. For each bulk collection execution,
  an array is populated with the rows determined by the cursor.
  The array variables are identified by the suffix 'tt'.
  ----------------------------------------------------------*/
  type acc_dt_tt is table of Date index by pls_integer;
  l_acc_dt acc_dt_tt;
  type estab_dt_tt is table of Date index by pls_integer;
  l_estab_dt estab_dt_tt;
  type avg_case_tt is table of char(1) index by pls_integer;
  l_avg_case avg_case_tt;
  type case_res_tt is table of number(11,2) index by pls_integer;
  l_case_res case_res_tt;
  case_res_split GUROWNER.AVG_CL_CLMS.CSE_RSV_AMNT%type;
  type rated_st_tt is table of char(2) index by pls_integer;
  l_rated_st rated_st_tt;
  dev_reserve GUROWNER.AVG_CL_CLMS.CSE_RSV_AMNT%type;
  type claim_no_tt is table of char(16) index by pls_integer;
  l_claim_no claim_no_tt;
  type feat_cnt_tt is table of number index by pls_integer;
  l_feat_cnt feat_cnt_tt;
  type cmpny_cd_tt is table of char(2) index by pls_integer;
  l_cmpny_cd cmpny_cd_tt;
  type CVRG_CD_tt is table of char(3) index by pls_integer;
  l_CVRG_CD CVRG_CD_tt;
  type veh_type_tt is table of char(3) index by pls_integer;
  l_veh_type veh_type_tt;
  type LOB_CD_tt is table of char(3) index by pls_integer;
  l_LOB_CD LOB_CD_tt;
  type risk_seg_tt is table of char(1) index by pls_integer;
  l_risk_seg risk_seg_tt;
  type rate_struc_tt is table of char(1) index by pls_integer;
  l_rate_struc rate_struc_tt;
  type policy_yrs_tt is table of char(2) index by pls_integer;
  l_policy_yrs policy_yrs_tt;
  type priv_pass_tt is table of char(1) index by pls_integer;
  l_priv_pass priv_pass_tt;
  type CLM_SMBL_tt is table of char(3) index by pls_integer;
  l_CLM_SMBL CLM_SMBL_tt;
  type claimant_tt is table of char(2) index by pls_integer;
  l_claimant claimant_tt;
  type avg_res_tt is table of number(15) index by pls_integer;
  l_avg_res avg_res_tt;
  type avg_res_split_tt is table of number(20,8) index by pls_integer;
  l_avg_res_split avg_res_split_tt;
  target_id       parm_targets.avg_targets_id%type := parm_targets.avg_targets_id;
  target          parm_targets.trgt%type           := parm_targets.trgt;
  target_filename parm_targets.filename%type       := rtrim(parm_targets.filename);
  start_tm number(12);
  pass1_tm number(12);
  pass2_tm number(12);
  elapsed number(12);
  c_yes char(1) := 'Y';
  c_active char(1) := 'Y';
  c_avg char(1) := 'A';
  c_zero number(1) := 0;
  c_one number(1) := 1;
  c_cov1 char(1) := '1';
  c_cov2 char(3) := '090';
  run_log_seq number(38);
  adj_run_seq number(38);
  severity number(6,0);
  ageMonths number(5) := null;
  avg_res number(20,8);
  avg_res_split number(20,8) := 0; 
  avg_SUM  number(20,8) := 0;       
  cov_respread number(20,8) := 0;
  feat_respread number(20,8) := 0;
  res_amt_feat number(20,8) :=0;
  final_coverage number(20,8) := 0;
  final_feature number(20,8) := 0;
  adj_amt number(20,8) := 0;
  adj_amt_cvg number(20,8) := 0;
  final_sum number(20,8) := 0;
  i integer := 0;
  prev_cov char(3) := '   ';
  prev_claim char(18) := ' ';
  firstbuf varchar2(200) := null;
  firstcode varchar2(3) := null;
  TRUNC_FEAT number(12,2);
  ROUND_COV number(12,2);
  COV_DIFF number(6,2);
  first_feat char(1) := 'N';
  balance_res number (20,2) := 0;
  balance_res_num number (20) := 0;
  
--  total_res number (20,2) := 0; -- modified to resolve rounding issue crating out of balance condition
  total_res number (20,8) := 0; -- modified to resolve rounding issue crating out of balance condition
  total_res_round number(20,2) :=0;
  total_res_num number (20) := 0;
  
  
  /*----------------------------------------------------------
  Set up to trap an overflow condition on the adjustment amt.
  ----------------------------------------------------------*/
  avg_overflow EXCEPTION;
  PRAGMA EXCEPTION_INIT(avg_overflow,-01438);
  /*----------------------------------------------------------
  This cursor has the following functions:
  1. Filter by the 9 group attributes (the claim symbol group
     table replaces the coverage group table for avg).
  2. Where avgcase = 1 and cov_cd not = 090.
  3. Add the feature count for each feature row on
  the input file. It joins the input table with another 
  version of the same table that is grouped by coverage.
  4. Sum the severities for computation in the 2nd pass.
  Note--the exclusion for claim symbol is in the following
  query twice--once for the query itself, and once for the
  grouping subquery. This was necessary for a correct
  coverage count computation.
  ----------------------------------------------------------*/
  cursor c1 is
    select ta.CVRG_CD, ta.CSE_RSV_AMNT,  
      ta.AVE_CASE_IND, ta.ID, 
      ta.ACDNT_DT, ta.CVRG_ESTB_DT, ta.veh_type, 
      ta.LOB_CD, ta.RT_ST_CD, ta.RSK_SGMT_CD,
      ta.RT_STRCTR_CD, ta.YRS_INSRD_CD, ta.PRVT_PSNGR_CD, ta.CLM_SMBL, ta.CLMNT, 
      tb.feat_cnt , ta.cmpny_cd, svrty as avg_res,
      svrty / tb.feat_cnt as avg_res_split
    from (
      select CLM_NMBR as ID, CVRG_CD, CSE_RSV_AMNT, AVE_CASE_IND, ACDNT_DT,
      CVRG_ESTB_DT, VHCL_TYP_CD as veh_type, LOB_CD, RT_ST_CD,
      RSK_SGMT_CD, RT_STRCTR_CD, YRS_INSRD_CD, PRVT_PSNGR_CD, CLM_SMBL,
      CLMNT, cmpny_cd
      from GUROWNER.AVG_CL_CLMS) ta
    inner join (
       select CLM_NMBR, CVRG_CD, count(CLM_NMBR) as feat_cnt from GUROWNER.AVG_CL_CLMS
       where clm_smbl || rt_st_cd in
      (select clm_smbl_cd || rt_st_cd
       from gurowner.clm_smbl_rt_st_grp a
       inner join gurowner.clm_smbl_grp b
         on a.clm_smbl_rt_st_grp = parm_targets.clm_smbl_rt_st_grp
         and a.clm_smbl_grp = b.clm_smbl_grp
         and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg
         and b.ACTV_IN=c_yes and b.RSRV_TYP=c_avg)
         group by CLM_NMBR, CVRG_CD) tb
    on ta.ID = tb.CLM_NMBR and
      ta.CVRG_CD = tb.CVRG_CD and
      ta.AVE_CASE_IND = c_cov1 and ta.cvrg_cd != c_cov2
      inner join gurowner.avg_severity
       on avg_severity_id = target_id 
       and age = floor(months_between(account_date,CVRG_ESTB_DT)) + c_one
    and exists
      (select 1
       from gurowner.res_cmpny_grp a
       where a.cmpny_grp = parm_targets.cmpny_grp
       and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.cmpny_cd=ta.cmpny_cd) 
    and ta.CLM_SMBL || ta.rt_st_cd in
       (select clm_smbl_cd || a.rt_st_cd
       from gurowner.clm_smbl_rt_st_grp a
       inner join gurowner.clm_smbl_grp b
         on a.clm_smbl_rt_st_grp = parm_targets.clm_smbl_rt_st_grp
         and a.clm_smbl_grp = b.clm_smbl_grp
         and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg
         and b.ACTV_IN=c_yes and b.RSRV_TYP=c_avg)
    --and exists
    --  (select 1
    --   from gurowner.res_lob_grp a       
    --   where a.lob_grp = parm_targets.lob_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.LOB_CD=ta.LOB_CD)
    --and exists
    --  (select 1
    --   from gurowner.res_rsk_sgmt_grp a       
    --   where a.rsk_sgmt_grp = parm_targets.rsk_sgmt_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.RSK_SGMT_CD=ta.RSK_SGMT_CD)
    --and exists
    --  (select 1
    --   from gurowner.res_rt_strctr_grp a
    --   where a.rt_strctr_grp = parm_targets.rt_strctr_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.RT_STRCTR_CD=ta.RT_STRCTR_CD)
    --and exists
    --  (select 1
    --   from gurowner.clm_vhcl_typ_grp a       
    --   where a.vhcl_typ_grp = parm_targets.vhcl_typ_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.vhcl_typ_cd=ta.VEH_TYPE)
    --and exists
    --  (select 1
    --   from gurowner.yrs_insrd_grp a       
    --   where a.yrs_insrd_grp = parm_targets.yrs_insrd_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.yrs_insrd_cd = ta.YRS_INSRD_CD)
    --and exists 
    -- (select 1
    --   from gurowner.prvt_psngr_grp a       
    --   where a.prvt_psngr_grp = parm_targets.prvt_psngr_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg AND a.PRVT_PSNGR_CD=ta.PRVT_PSNGR_CD)
--and rownum <= 20
  order by ta.id, ta.CVRG_CD, ta.CLM_SMBL, ta.CLMNT;
  BEGIN
    /*----------------------------------------------------------
    Write title line for first pass calculations.
    ----------------------------------------------------------*/
    --DBMS_OUTPUT.PUT_LINE('CO     CLAIM_NO     ST COV  ESTAB_DT  ' || 
    -- 'SVRTY  SPLIT  CNT  ROUND COV  TRUNC FEAT  DIFF  ADJ   AVG SUM');
    /*----------------------------------------------------------
     First pass--collect balance numbers and calculate reserve.
    ---------------------------------------------------------*/
    /*----------------------------------------------------------
     Collect balance totals. This SQL is the same as C1, except
     for the join on factor table--we don't need that calculation.
    ----------------------------------------------------------*/
--  select sum(svrty / tb.feat_cnt), sum(CSE_RSV_AMNT), count(*)  -
  select sum(svrty / tb.feat_cnt), sum(CSE_RSV_AMNT / tb.feat_cnt), count(*)  -- Changed code after test case#1
  into avg_sum, balance_res, balance_res_num
    from GUROWNER.AVG_CL_CLMS ta
    inner join (
       select CLM_NMBR as ID, CVRG_CD, count(CLM_NMBR) as feat_cnt 
       from GUROWNER.AVG_CL_CLMS
       where clm_smbl || rt_st_cd in
      (select clm_smbl_cd || rt_st_cd
       from gurowner.clm_smbl_rt_st_grp a
       inner join gurowner.clm_smbl_grp b
         on a.clm_smbl_rt_st_grp = parm_targets.clm_smbl_rt_st_grp
         and a.clm_smbl_grp = b.clm_smbl_grp
         and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg
         and b.ACTV_IN=c_yes and b.RSRV_TYP=c_avg)
         group by CLM_NMBR, CVRG_CD) tb
    on ta.CLM_NMBR = tb.ID and
      ta.CVRG_CD = tb.CVRG_CD and
      ta.AVE_CASE_IND = c_cov1 and ta.cvrg_cd != c_cov2
      inner join gurowner.avg_severity
       on avg_severity_id = target_id 
       and age = floor(months_between(account_date,CVRG_ESTB_DT)) + c_one
    and exists
      (select 1
       from gurowner.res_cmpny_grp a
       where a.cmpny_grp = parm_targets.cmpny_grp
       and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.cmpny_cd=ta.cmpny_cd) 
    and ta.CLM_SMBL || ta.rt_st_cd in
       (select clm_smbl_cd || a.rt_st_cd
       from gurowner.clm_smbl_rt_st_grp a
       inner join gurowner.clm_smbl_grp b
         on a.clm_smbl_rt_st_grp = parm_targets.clm_smbl_rt_st_grp
         and a.clm_smbl_grp = b.clm_smbl_grp
         and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg
         and b.ACTV_IN=c_yes and b.RSRV_TYP=c_avg)
    --and exists
    --  (select 1
    --   from gurowner.res_lob_grp a       
    --   where a.lob_grp = parm_targets.lob_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.LOB_CD=ta.LOB_CD)
    --and exists
    --  (select 1
    --   from gurowner.res_rsk_sgmt_grp a       
    --   where a.rsk_sgmt_grp = parm_targets.rsk_sgmt_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.RSK_SGMT_CD=ta.RSK_SGMT_CD)
    --and exists
    --  (select 1
    --   from gurowner.res_rt_strctr_grp a
    --   where a.rt_strctr_grp = parm_targets.rt_strctr_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.RT_STRCTR_CD=ta.RT_STRCTR_CD)
    --and exists
    --  (select 1
    --   from gurowner.clm_vhcl_typ_grp a       
    --   where a.vhcl_typ_grp = parm_targets.vhcl_typ_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.vhcl_typ_cd=ta.vhcl_typ_cd)
    --and exists
    --  (select 1
    --   from gurowner.yrs_insrd_grp a       
    --   where a.yrs_insrd_grp = parm_targets.yrs_insrd_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg and a.yrs_insrd_cd = ta.YRS_INSRD_CD)
    --and exists 
    -- (select 1
    --   from gurowner.prvt_psngr_grp a       
    --   where a.prvt_psngr_grp = parm_targets.prvt_psngr_grp
    --   and a.ACTV_IN=c_yes and a.RSRV_TYP=c_avg AND a.PRVT_PSNGR_CD=ta.PRVT_PSNGR_CD)
  order by ta.clm_nmbr, ta.CVRG_CD, ta.CLM_SMBL, ta.CLMNT;
   --- balance_res := 666; --DEBUG BALANCE
  start_tm := Dbms_Utility.Get_Time;
  --dbms_output.put_line('start = ' || to_char(start_tm));
  --DBMS_OUTPUT.PUT_LINE('avg sum = ' || to_char(avg_sum) || 'count = ' || to_char(balance_res_num));
  if target > 0 then
     goto bypass_reserve;
  end if;
  open c1;
  LOOP
    fetch c1 bulk collect into l_CVRG_CD, l_case_res, --l_cov_stat, 
      l_avg_case, l_claim_no, --l_claim_cnt, 
      l_acc_dt, l_estab_dt,  l_veh_type, --l_res_type, 
      l_LOB_CD, l_rated_st, l_risk_seg, l_rate_struc, l_policy_yrs, l_priv_pass, 
      l_CLM_SMBL, l_claimant, l_feat_cnt, l_cmpny_cd,
      l_avg_res, l_avg_res_split
      limit limit_in;
      EXIT WHEN l_estab_dt.count = 0;
    for i in 1 .. l_estab_dt.count
    LOOP
      /*---------------------------------------------------------
      If target amt = 0, make the spread based on severity,
      otherwise use the target value.
      ----------------------------------------------------------*/                       
     adj_amt := l_avg_res_split(i); 
     adj_amt_cvg := l_avg_res(i);
     ROUND_COV := adj_amt_cvg;      
     adj_amt := round_cov / l_feat_cnt(i);
     adj_amt := trunc(adj_amt,2);
     trunc_feat := adj_amt;
     if l_CVRG_CD(i) != prev_cov or
        l_claim_no(i) != prev_claim or
        prev_cov is null or
        prev_claim is null then
        first_feat := 'Y';
          insert into GUROWNER.AVG_ADJSTMNTS_BAL
            (avg_adjstmnts_id, filename, run_id, accdnt_yr, accdnt_mnth, rcrd_id,
              cmpny_cd, clm_nmbr, rsk_sgmt_cd, rt_strctr_cd,
              rt_st_cd, lob_cd, vhcl_typ_cd, prvt_psngr_cd, yrs_insrd_cd, cvrg_cd,
              clm_smbl, clmnt, avg_ADJ_AMT)
         values
            (GUROWNER.GUR_avg_SEQ.currval, target_filename, parm_runid , 
              to_char(l_acc_dt(i),'yy'), to_char(l_acc_dt(i),'mm'),
              'C', l_cmpny_cd(i), l_claim_no(i), l_risk_seg(i),
              l_rate_struc(i), l_rated_st(i), l_LOB_CD(i), l_veh_type(i), l_priv_pass(i),
              l_policy_yrs(i), l_CVRG_CD(i), ' ', ' ', adj_amt_cvg);
     end if;
     if first_feat = 'Y' then           
        COV_DIFF := round_cov - trunc_feat * l_feat_cnt(i);
        IF COV_DIFF = 0 THEN
           null;
        else
           adj_amt := trunc_feat + COV_DIFF;
        end if;   
        first_feat := 'N';
      end if;
        /*----------------------------------------------------------
        Use gur_avg_seq.currval to use the same sequence number that
        was generated for the insert into the parent table,
        dev_adj_run.
        ----------------------------------------------------------*/
      insert into GUROWNER.AVG_ADJSTMNTS_BAL
        (avg_adjstmnts_id, filename, run_id, accdnt_yr, accdnt_mnth, rcrd_id,
          cmpny_cd, clm_nmbr, rsk_sgmt_cd, rt_strctr_cd,
          rt_st_cd, lob_cd, vhcl_typ_cd, prvt_psngr_cd, yrs_insrd_cd, cvrg_cd,
          clm_smbl, clmnt, avg_adj_amt)
      values
            (GUROWNER.GUR_avg_SEQ.currval, target_filename, parm_runid , 
          to_char(l_acc_dt(i),'yy'), to_char(l_acc_dt(i),'mm'),
          'F', l_cmpny_cd(i), l_claim_no(i), l_risk_seg(i),
          l_rate_struc(i), l_rated_st(i), l_LOB_CD(i), l_veh_type(i), l_priv_pass(i),
          l_policy_yrs(i), l_CVRG_CD(i), l_CLM_SMBL(i), l_claimant(i), adj_amt);
      prev_cov := l_CVRG_CD(i);
      prev_claim := l_claim_no(i);
--      total_res := total_res + l_case_res(i);
        total_res := total_res + (l_case_res(i)/l_feat_cnt(i)); -- code changes after test case # 1
      total_res_num := total_res_num + 1;
      --DBMS_OUTPUT.PUT_LINE (l_cmpny_cd(i) || ' '|| l_claim_no(i) 
      --  || ' ' || l_rated_st(i) || ' ' || l_cvrg_cd(i) 
      --  || ' ' || l_estab_dt(i) || '   ' || to_char(l_avg_res(i)) 
      --  || '    ' || to_char(l_avg_res_split(i)) 
      --  || '    ' || to_char(l_feat_cnt(i)) 
      --  || '      ' || to_char(round_cov) || '      ' || to_char(trunc_feat) 
      --  || '      ' || to_char(cov_diff) || '     ' || to_char(adj_amt)
      --  || '      ' || to_char(avg_sum));
    END LOOP;
  END LOOP;
  close c1;
  --dbms_output.put_line('avg sum = ' || to_char(avg_sum));
  pass1_tm := dbms_utility.get_time;
  elapsed := pass1_tm - start_tm;
  --dbms_output.put_line('pass1 elapsed = ' || to_char(elapsed));
  <<bypass_reserve>>
  /*----------------------------------------------------------         
  The only way avg_sum can be zero at this point is if the first
  fetch returned zero rows. We may want to abort here, but
  right now just show the error.
  ----------------------------------------------------------*/  
  if avg_sum = 0 or
     avg_sum is null then
    --DBMS_OUTPUT.PUT_LINE ('No data matches this target grouping, ' || target_filename);
    parmcode := '002';
    parmbuf := 'No data matches this target grouping, ' || target_filename;
    if firstcode is null then
       firstbuf := parmbuf;
       firstcode := parmcode;
    end if;
  end if;
  if target = 0 then 
    goto bypass_target;
  end if;
  --dbms_output.put_line('pass1 elapsed = ' || to_char(elapsed ));
  --DBMS_OUTPUT.PUT_LINE('CO     CLAIM_NO    ' ||
  --  '      ADJ COV  RND COV TRUNC FEAT DIFF ADJ  FINAL SUM');
  /*----------------------------------------------------------         
  Second pass, create the spread.              
  ----------------------------------------------------------*/  
  open c1;
  LOOP
    fetch c1 bulk collect into l_CVRG_CD, l_case_res, --l_cov_stat, 
      l_avg_case, l_claim_no, --l_claim_cnt, 
      l_acc_dt, l_estab_dt,  l_veh_type, --l_res_type, 
      l_LOB_CD, l_rated_st, l_risk_seg, l_rate_struc, l_policy_yrs, l_priv_pass, 
      l_CLM_SMBL, l_claimant, l_feat_cnt,l_cmpny_cd, l_avg_res, l_avg_res_split
      limit limit_in;
      EXIT WHEN l_estab_dt.count = 0;
    for i in 1 .. l_estab_dt.count
    LOOP
      if avg_sum = 0 then
        res_amt_feat := 0;
        parmcode := '005';
        parmbuf := 'Zero divide for avg_sum, claim = ' || l_claim_no(i);
        if firstcode is null then
          firstbuf := parmbuf;
          firstcode := parmcode;
        end if;
      else
        RES_AMT_FEAT := TARGET * l_avg_res_split(i) / AVG_SUM;
      end if;
      adj_amt := RES_AMT_FEAT; 
      adj_amt_cvg := adj_amt * l_feat_cnt(i);
      ROUND_COV := adj_amt_cvg;
      adj_amt := round_cov / l_feat_cnt(i);         
      adj_amt := trunc(adj_amt,2);
      trunc_feat := adj_amt;  
      /*----------------------------------------------------------
      Use gur_avg_seq.currval to use the same sequence number that
      was generated for the insert into the parent table,
      dev_adj_run.
      ----------------------------------------------------------*/
      if l_CVRG_CD(i) != prev_cov or
        l_claim_no(i) != prev_claim or
        prev_cov is null or
        prev_claim is null then 
           first_feat := 'Y';
           insert into GUROWNER.AVG_ADJSTMNTS_BAL
             (avg_adjstmnts_id, filename, run_id, accdnt_yr, accdnt_mnth, rcrd_id,
             cmpny_cd, clm_nmbr, rsk_sgmt_cd, rt_strctr_cd,
             rt_st_cd, lob_cd, vhcl_typ_cd, prvt_psngr_cd, yrs_insrd_cd, cvrg_cd,
             clm_smbl, clmnt, avg_ADJ_AMT)
           values
             (GUROWNER.GUR_avg_SEQ.currval, target_filename, parm_runid,
             to_char(l_acc_dt(i),'yy'), to_char(l_acc_dt(i),'mm'),
             'C', l_cmpny_cd(i), l_claim_no(i), l_risk_seg(i),
             l_rate_struc(i), l_rated_st(i), l_LOB_CD(i), l_veh_type(i), l_priv_pass(i),
             l_policy_yrs(i), l_CVRG_CD(i), ' ', ' ', adj_amt_cvg); 
      end if;
      if first_feat = 'Y' then 
         COV_DIFF := round_cov - trunc_feat * l_feat_cnt(i);       
         IF COV_DIFF = 0 THEN
            null;
         else
            adj_amt := trunc_feat + COV_DIFF;
         end if;   
         first_feat := 'N';
      end if;
         insert into GUROWNER.AVG_ADJSTMNTS_BAL
           (avg_adjstmnts_id, filename, run_id, accdnt_yr, accdnt_mnth, rcrd_id,
           cmpny_cd, clm_nmbr, rsk_sgmt_cd, rt_strctr_cd,
           rt_st_cd, lob_cd, vhcl_typ_cd, prvt_psngr_cd, yrs_insrd_cd, cvrg_cd,
           clm_smbl, clmnt, avg_adj_amt)
         values
           (GUROWNER.GUR_avg_SEQ.currval, target_filename, parm_runid, 
           to_char(l_acc_dt(i),'yy'), to_char(l_acc_dt(i),'mm'),
           'F', l_cmpny_cd(i), l_claim_no(i), l_risk_seg(i),
           l_rate_struc(i), l_rated_st(i), l_LOB_CD(i), l_veh_type(i), l_priv_pass(i),
           l_policy_yrs(i), l_CVRG_CD(i), l_CLM_SMBL(i), l_claimant(i), adj_amt);
      prev_cov := l_CVRG_CD(i);
      prev_claim := l_claim_no(i);
      FINAL_SUM := final_sum + adj_amt;
--      total_res := total_res + l_case_res(i);
        total_res := total_res + (l_case_res(i) / l_feat_cnt(i)); -- code changes after test case # 1

      total_res_num := total_res_num + 1;
      --if l_claim_no(i) = '0003293960101424' then
      --   DBMS_OUTPUT.PUT_LINE('CO     CLAIM_NO        ' 
      --     || 'ADJ COV      RND COV TRUNC FEAT DIFF ADJ');
      --   DBMS_OUTPUT.PUT_LINE (l_cmpny_cd(i) || ' ' || l_claim_no(i) 
      --     || '  ' || to_char(adj_amt_cvg) || '   ' || to_char(round_cov)
      --     || '     ' || to_char(trunc_feat) || '    ' || to_char(cov_diff)
      --     || '  ' || to_char(adj_amt));
      --end if;
    END LOOP;
  END LOOP;
--DBMS_OUTPUT.PUT_LINE ('target sum = ' || to_char(final_sum));
  close c1;
  pass2_tm := dbms_utility.get_time;
  elapsed := pass2_tm - pass1_tm;
  --dbms_output.put_line('pass2 elapsed = ' || to_char(elapsed));
  <<bypass_target>>
  --DBMS_OUTPUT.PUT_LINE('parmcode = ' || parmcode ||
  --   ', parmbuf = ' || parmbuf);
  if (firstcode < '900' or firstcode is null) and
     balance_res is not null then
--     if balance_res = total_res and
--        balance_res_num = total_res_num then
        
         total_res_round := total_res ; --- to correct the rounding issue
         if balance_res = total_res_round and
            balance_res_num = total_res_num then
        
        /*----------------------------------------------------------  
         Use the sequence number set in the package definition.
        ----------------------------------------------------------*/  
         null;
     else
        firstbuf := 'Out of bal: bal res = ' || to_char(balance_res) 
        || ', bal num = ' || to_char(balance_res_num)
--        || ', tot res = ' || to_char(total_res) 
        || ', tot res_round = ' || to_char(total_res_round) 
        || ', tot num = ' || to_char(total_res_num);
        firstcode := '999';
        adj_run_seq := gurowner.gur_avg_seq.currval;
        delete from gurowner.avg_adj_run
          where avg_adj_run_id = adj_run_seq;
        if firstcode is null then
           firstbuf := parmbuf; 
           firstcode := parmcode;
        end if;
     end if;
  end if;
          if run_log_started is null then   --moved this block if for balancing to write alwayst to the output table. If it balances 
           run_log_seq := gurowner.gur_avg_log_seq.nextval;
           run_log_started := 'Y';
        else
           run_log_seq := gurowner.gur_avg_log_seq.currval;
        end if;
        insert into gurowner.avg_run_log
          (log_id,target_id,filename,error_txt,target,total_spread, run_ts)
        values
         (run_log_seq,target_id,target_filename,
          parmbuf,target,final_sum,current_timestamp);
  
  parmbuf := firstbuf;
  parmcode := firstcode;
/*----------------------------------------------------------
  Exception processing.
  Check for an overflow in the adjustment amt.
  ---------------------------------------------------------*/
  EXCEPTION
    when avg_overflow then
      DBMS_OUTPUT.PUT_LINE('Avg amount overflow = ' || to_char(avg_res));
END process_avg_rsrv_rcrds_btch;

PROCEDURE process_avg_rsrv_rcrds (errbuf  OUT VARCHAR2, retcode OUT VARCHAR2,
  account_date in Date, parm_filename in varchar2, limit_in IN PLS_INTEGER DEFAULT 200, parm_runid IN VARCHAR2, PARM_RN_CNTRL_Q_ID IN VARCHAR2 )
--  account_date in Date, parm_filename in varchar2,   limit_in IN PLS_INTEGER DEFAULT 200)
    is
  /*---------------------------------------------------------------------------
  This is the msain program, called from Data Migrator This programs calls a
  subroutine, process_avg_rsrv_rcrds_btch.
  Uses the avg_targets table as a driver, and calls process_avg_rsrv_rcrds_btch
  for each row fetched.
  
  Parms:
  1. errbuf--Return error message to Data Migrator.
  2. retcode--Return code to Data Migrator.
  3. account_date--as of processing date, passed from process_avg_rsrv_rcrds.
  4. parm_filename--file name passed from the target table, passed to the
     subroutine.
  5. limit_in--a value for the number of records that cursor c1 uses in
     process_avg_rsrv_rcrds_btch for each bulk collection call. Defaults to 100.
     
  Input:
  1. Pending claims table (cl_clms), via Data Migrator.
  2. avg_targets--this is the driver table for executing the code.
  3. avg_adjstmnts_dups--output of all calls to the subroutine, 
     process_avg_rsrv_rcrds_btch.
     
  Output:
  1. avg_adjstmnts--summarizes the caseadj (spread amount) from table
     avg_adjstmnts_dups over the duplicate records for a particular claim.
  ---------------------------------------------------------------------------*/
  parm_targets gurowner.avg_targets%rowtype;
  target_filename parm_targets.filename%type;
  firstbuf  varchar2(200) := null;
  firstcode varchar2(3)   := null;
  parmbuf   varchar2(200) := null;
  parmcode  varchar2(3)   := null;
  Operation_Status  number (38);
  cursor c2 is 
    /*------------------------------------------------------------------
    This cursor retrieves rows that match file name from ibnr_targets.
    ------------------------------------------------------------------*/
    select AVG_TARGETS_ID, FILE_ROW_NUM, FILENAME, RSK_SGMT_GRP, CMPNY_GRP, RT_STRCTR_GRP,
      CLM_SMBL_RT_ST_GRP, LOB_GRP, VHCL_TYP_GRP, YRS_INSRD_GRP, 
      PRVT_PSNGR_GRP, TRGT
      from gurowner.avg_targets
      where filename = rtrim(parm_filename);
  BEGIN
    errbuf := null;
    retcode := null;
    if account_date is null then
       parmcode := '004';
       parmbuf := 'Account date is null-process terminated.';
       if firstcode is null then
         firstbuf := parmbuf;
         firstcode := parmcode;
         goto bypass_run;
       end if;
    end if;
    /* truncate bal table */
    delete from gurowner.avg_adjstmnts_bal;
    /*----------------------------------------------------------         
    Generate the next sequence value from gur_avg_seq for the row id.
    It can be set up by yourself, using your user id, but when we go
    prod, it has to be set up by an administrator.
    The one used here is:
    CREATE SEQUENCE u12a05.gur_avg_seq
    INCREMENT BY 1
    START WITH 1
    cache 20
    noorder; 
    gur.avg.seq.nextval, in the code below, creates the sequence number.
    ----------------------------------------------------------*/  
    --DBMS_OUTPUT.PUT_LINE ('gurowner.gur_avg_seq.nextval'|| gurowner.gur_avg_seq.nextval);
    insert into gurowner.avg_adj_run
      (avg_adj_run_id,filename,accnt_dt,run_time,usr_id)
    values
      (gurowner.gur_avg_seq.nextval,rtrim(parm_filename),account_date,current_timestamp,user);
                  
    open c2;
    LOOP
      /*---------------------------------------------------------
      Fetch the row and call the spread routine.
      ----------------------------------------------------------*/
      fetch c2 into parm_targets;
      EXIT WHEN c2%NOTFOUND OR c2%NOTFOUND IS NULL;
      --DBMS_OUTPUT.PUT_LINE('target id = ' || to_char(parm_targets.avg_targets_id)
      --|| ', filename = ' || parm_targets.filename 
      --|| ', target = ' || to_char(parm_targets.trgt));
      process_avg_rsrv_rcrds_btch(parm_targets, account_date, parm_runid, parmbuf, parmcode,
        limit_in);
      /*-------------------------------------------------------------
      Check for error code. If we have one, write it to firstcode.
      On subsequent errors, do not write over firstcode if it's 
      nonblank. That way, we'll always get the first error, not the
      last one. If it's a fatal error, stop processing.
      -------------------------------------------------------------*/
      if parmcode is null then
         null;
      else
         firstbuf  := parmbuf;
         firstcode := parmcode;
         if parmcode > '900' then
            exit;
         end if;
      end if;
    END LOOP;
    if c2%rowcount = 0 then
       parmcode := '003';
       parmbuf := 'File name not found in targets table = ' || rtrim(parm_filename);
       if firstcode is null then
         firstbuf := parmbuf;
         firstcode := parmcode;
       end if;
    end if;
    close c2;
    /*------------------------------------------------------
    * summarize amount over duplicate records
    -------------------------------------------------------*/
--    if parmcode > '900' then
--      null;     
    if parmcode < '900' or parmcode is null then
--    else
       insert into gurowner.avg_adjstmnts
         (SELECT AVG_ADJSTMNTS_ID, FILENAME, RUN_ID, ACCDNT_YR, ACCDNT_MNTH, 
          RCRD_ID, CMPNY_CD, CLM_NMBR, RSK_SGMT_CD, RT_STRCTR_CD, RT_ST_CD,
          LOB_CD, VHCL_TYP_CD, PRVT_PSNGR_CD, YRS_INSRD_CD, CVRG_CD, CLM_SMBL,
          CLMNT ,sum(avg_adj_amt) as avg_adj_amt
          FROM gurowner.AVG_ADJSTMNTS_BAL 
            GROUP BY 
            AVG_ADJSTMNTS_ID, FILENAME, RUN_ID, ACCDNT_YR, ACCDNT_MNTH, 
            RCRD_ID, CMPNY_CD, CLM_NMBR, RSK_SGMT_CD, RT_STRCTR_CD, RT_ST_CD, 
            LOB_CD, VHCL_TYP_CD, PRVT_PSNGR_CD, YRS_INSRD_CD, CVRG_CD, CLM_SMBL, 
            CLMNT);
    end if;

   if parmcode is null then
      parmcode := '0';
      parmbuf := 'Normal end';
  end if;        
      
      UPDATE GUROWNER.RN_CNTRL_Q  SET RETURN_CD = parmcode , ERR_MSG = parmbuf,
      DT_UPDT = CURRENT_TIMESTAMP,  UPDT_USR_ID =  USER   
      WHERE RN_CNTRL_Q_ID = PARM_RN_CNTRL_Q_ID;

    <<bypass_run>>
    
    --dbms_mview.refresh('mv_avg_adjstmnts');

    if parmcode is null or parmcode = '0' then
       errbuf := 'Normal end';
       retcode := '0';
    else
       errbuf := firstbuf;
       retcode := firstcode;
       end if;
    /* code for materialized view--will implement later
    select cmpny_cd, CLM_NMBR, CVRG_CD, CSE_RSV_AMNT, AVE_CASE_IND,
      ACDNT_DT, VHCL_TYP_CD, LOB_CD, RT_ST_CD, RSK_SGMT_CD,
      RT_STRCTR_CD, YRS_INSRD_CD, PRVT_PSNGR_CD, CLM_SMBL, CLMNT
      from GUROWNER.AVG_CL_CLMS c
      and clm_nmbr || cvrg_cd || clm_smbl
      not in (
        select c.clm_nmbr || c.cvrg_cd || c.clm_smbl
        from gurowner.avg_adjstmnts b
        where rcrd_id = 'F' and 
         avg_adjstmnts_id = GUROWNER.GUR_avg_SEQ.currval and 
         c.clm_nmbr = b.clm_nmbr and
         c.cvrg_cd = b.cvrg_cd and
         c.clm_smbl = b.clm_smbl)
       order by c.clm_nmbr;
       -------------------------------------------------------*/
    --commit;
       CLEAN_AVG_TRGTS_SVRTY(parm_filename,Operation_Status) ;

    DBMS_OUTPUT.PUT_LINE('retcode = ' || retcode ||
       ', errbuf = ' || errbuf);
  END process_avg_rsrv_rcrds;

PROCEDURE LOAD_AVG_TRGTS_SEVERITY (In_File_Name in varchar2, Operation_Status out number)
is

CURSOR CUR_AVG_TARGETS_SEVERITY IS

SELECT FILE_ROW_NUM,
  FILE_NAME,
  RISK_SEGMENT_GRP,
  COMPANY_GRP,
  RATE_STRUCTURE_GRP,
  CLM_SMBL_RT_ST_GRP,
  LOB_GRP,
  VEHICLE_TYPE_GRP,
  YEARS_INSURED_GRP,
  PRIVATE_PASSENGER_GRP,
  AVG_DOLLAR_TARGET,
  ACCIDENT_AGE_1,
  ACCIDENT_AGE_2,
  ACCIDENT_AGE_3,
  ACCIDENT_AGE_4,
  ACCIDENT_AGE_5,
  ACCIDENT_AGE_6,
  ACCIDENT_AGE_7,
  ACCIDENT_AGE_8,
  ACCIDENT_AGE_9,
  ACCIDENT_AGE_10,
  ACCIDENT_AGE_11,
  ACCIDENT_AGE_12,
  ACCIDENT_AGE_13,
  ACCIDENT_AGE_14,
  ACCIDENT_AGE_15,
  ACCIDENT_AGE_16,
  ACCIDENT_AGE_17,
  ACCIDENT_AGE_18,
  ACCIDENT_AGE_19,
  ACCIDENT_AGE_20,
  ACCIDENT_AGE_21,
  ACCIDENT_AGE_22,
  ACCIDENT_AGE_23,
  ACCIDENT_AGE_24,
  ACCIDENT_AGE_25,
  ACCIDENT_AGE_26,
  ACCIDENT_AGE_27,
  ACCIDENT_AGE_28,
  ACCIDENT_AGE_29,
  ACCIDENT_AGE_30,
  ACCIDENT_AGE_31,
  ACCIDENT_AGE_32,
  ACCIDENT_AGE_33,
  ACCIDENT_AGE_34,
  ACCIDENT_AGE_35,
  ACCIDENT_AGE_36,
  ACCIDENT_AGE_37,
  ACCIDENT_AGE_38,
  ACCIDENT_AGE_39,
  ACCIDENT_AGE_40,
  ACCIDENT_AGE_41,
  ACCIDENT_AGE_42,
  ACCIDENT_AGE_43,
  ACCIDENT_AGE_44,
  ACCIDENT_AGE_45,
  ACCIDENT_AGE_46,
  ACCIDENT_AGE_47,
  ACCIDENT_AGE_48,
  ACCIDENT_AGE_49,
  ACCIDENT_AGE_50,
  ACCIDENT_AGE_51,
  ACCIDENT_AGE_52,
  ACCIDENT_AGE_53,
  ACCIDENT_AGE_54,
  ACCIDENT_AGE_55,
  ACCIDENT_AGE_56,
  ACCIDENT_AGE_57,
  ACCIDENT_AGE_58,
  ACCIDENT_AGE_59,
  ACCIDENT_AGE_60,
  ACCIDENT_AGE_61,
  ACCIDENT_AGE_62,
  ACCIDENT_AGE_63,
  ACCIDENT_AGE_64,
  ACCIDENT_AGE_65,
  ACCIDENT_AGE_66,
  ACCIDENT_AGE_67,
  ACCIDENT_AGE_68,
  ACCIDENT_AGE_69,
  ACCIDENT_AGE_70,
  ACCIDENT_AGE_71,
  ACCIDENT_AGE_72,
  ACCIDENT_AGE_73,
  ACCIDENT_AGE_74,
  ACCIDENT_AGE_75,
  ACCIDENT_AGE_76,
  ACCIDENT_AGE_77,
  ACCIDENT_AGE_78,
  ACCIDENT_AGE_79,
  ACCIDENT_AGE_80,
  ACCIDENT_AGE_81,
  ACCIDENT_AGE_82,
  ACCIDENT_AGE_83,
  ACCIDENT_AGE_84,
  ACCIDENT_AGE_85,
  ACCIDENT_AGE_86,
  ACCIDENT_AGE_87,
  ACCIDENT_AGE_88,
  ACCIDENT_AGE_89,
  ACCIDENT_AGE_90,
  ACCIDENT_AGE_91,
  ACCIDENT_AGE_92,
  ACCIDENT_AGE_93,
  ACCIDENT_AGE_94,
  ACCIDENT_AGE_95,
  ACCIDENT_AGE_96,
  ACCIDENT_AGE_97,
  ACCIDENT_AGE_98,
  ACCIDENT_AGE_99,
  ACCIDENT_AGE_100,
  ACCIDENT_AGE_101,
  ACCIDENT_AGE_102,
  ACCIDENT_AGE_103,
  ACCIDENT_AGE_104,
  ACCIDENT_AGE_105,
  ACCIDENT_AGE_106,
  ACCIDENT_AGE_107,
  ACCIDENT_AGE_108,
  ACCIDENT_AGE_109,
  ACCIDENT_AGE_110,
  ACCIDENT_AGE_111,
  ACCIDENT_AGE_112,
  ACCIDENT_AGE_113,
  ACCIDENT_AGE_114,
  ACCIDENT_AGE_115,
  ACCIDENT_AGE_116,
  ACCIDENT_AGE_117,
  ACCIDENT_AGE_118,
  ACCIDENT_AGE_119,
  ACCIDENT_AGE_120
FROM TMP_AVG_TARGETS_SEVERITY  
WHERE FILE_NAME=In_File_Name 
ORDER BY FILE_ROW_NUM;
REC_AVG_TARGETS_SEVERITY CUR_AVG_TARGETS_SEVERITY%ROWTYPE;


ageFactor numeric(6,0);
fileName varchar2(100);
targetId number(38);
BEGIN
Operation_Status:=0;
Open CUR_AVG_TARGETS_SEVERITY;
Loop
fetch CUR_AVG_TARGETS_SEVERITY INTO REC_AVG_TARGETS_SEVERITY;
exit when CUR_AVG_TARGETS_SEVERITY%NOTFOUND;

--DBMS_OUTPUT.put_line(REC_AVG_TARGETS_SEVERITY.RISK_SEGMENT_GRP);
fileName := REC_AVG_TARGETS_SEVERITY.FILE_NAME;
targetId :=GUROWNER.GUR_AVG_TRGT_SEQ.NEXTVAL;
INSERT
INTO AVG_TARGETS
  (
    AVG_TARGETS_ID,
    FILE_ROW_NUM,
    FILENAME,
    RSK_SGMT_GRP,
    CMPNY_GRP,
    RT_STRCTR_GRP,
    CLM_SMBL_RT_ST_GRP,
    LOB_GRP,
    VHCL_TYP_GRP,
    YRS_INSRD_GRP,
    PRVT_PSNGR_GRP,    
    TRGT
  )
  VALUES
  (
    targetId,
    REC_AVG_TARGETS_SEVERITY.FILE_ROW_NUM,
    REC_AVG_TARGETS_SEVERITY.FILE_NAME,
    REC_AVG_TARGETS_SEVERITY.RISK_SEGMENT_GRP,
    REC_AVG_TARGETS_SEVERITY.COMPANY_GRP,
    REC_AVG_TARGETS_SEVERITY.RATE_STRUCTURE_GRP,
    REC_AVG_TARGETS_SEVERITY.CLM_SMBL_RT_ST_GRP,
    REC_AVG_TARGETS_SEVERITY.LOB_GRP,
    REC_AVG_TARGETS_SEVERITY.VEHICLE_TYPE_GRP,
    REC_AVG_TARGETS_SEVERITY.YEARS_INSURED_GRP,
    REC_AVG_TARGETS_SEVERITY.PRIVATE_PASSENGER_GRP,
    REC_AVG_TARGETS_SEVERITY.AVG_DOLLAR_TARGET
  );

FOR i in 1..120
LOOP

ageFactor:= Case i
      WHEN 1 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_1
      WHEN 2 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_2
      WHEN 3 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_3
      WHEN 4 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_4
      WHEN 5 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_5
      WHEN 6 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_6
      WHEN 7 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_7
      WHEN 8 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_8
      WHEN 9 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_9
      WHEN 10 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_10
      WHEN 11 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_11
      WHEN 12 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_12
      WHEN 13 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_13
      WHEN 14 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_14
      WHEN 15 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_15
      WHEN 16 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_16
      WHEN 17 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_17
      WHEN 18 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_18
      WHEN 19 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_19
      WHEN 20 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_20
      WHEN 21 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_21
      WHEN 22 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_22
      WHEN 23 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_23
      WHEN 24 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_24
      WHEN 25 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_25
      WHEN 26 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_26
      WHEN 27 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_27
      WHEN 28 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_28
      WHEN 29 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_29
      WHEN 30 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_30
      WHEN 31 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_31
      WHEN 32 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_32
      WHEN 33 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_33
      WHEN 34 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_34
      WHEN 35 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_35
      WHEN 36 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_36
      WHEN 37 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_37
      WHEN 38 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_38
      WHEN 39 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_39
      WHEN 40 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_40
      WHEN 41 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_41
      WHEN 42 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_42
      WHEN 43 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_43
      WHEN 44 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_44
      WHEN 45 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_45
      WHEN 46 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_46
      WHEN 47 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_47
      WHEN 48 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_48
      WHEN 49 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_49
      WHEN 50 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_50
      WHEN 51 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_51
      WHEN 52 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_52
      WHEN 53 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_53
      WHEN 54 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_54
      WHEN 55 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_55
      WHEN 56 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_56
      WHEN 57 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_57
      WHEN 58 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_58
      WHEN 59 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_59
      WHEN 60 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_60
      WHEN 61 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_61
      WHEN 62 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_62
      WHEN 63 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_63
      WHEN 64 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_64
      WHEN 65 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_65
      WHEN 66 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_66
      WHEN 67 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_67
      WHEN 68 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_68
      WHEN 69 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_69
      WHEN 70 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_70
      WHEN 71 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_71
      WHEN 72 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_72
      WHEN 73 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_73
      WHEN 74 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_74
      WHEN 75 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_75
      WHEN 76 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_76
      WHEN 77 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_77
      WHEN 78 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_78
      WHEN 79 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_79
      WHEN 80 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_80
      WHEN 81 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_81
      WHEN 82 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_82
      WHEN 83 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_83
      WHEN 84 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_84
      WHEN 85 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_85
      WHEN 86 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_86
      WHEN 87 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_87
      WHEN 88 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_88
      WHEN 89 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_89
      WHEN 90 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_90
      WHEN 91 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_91
      WHEN 92 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_92
      WHEN 93 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_93
      WHEN 94 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_94
      WHEN 95 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_95
      WHEN 96 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_96
      WHEN 97 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_97
      WHEN 98 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_98
      WHEN 99 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_99
      WHEN 100 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_100
      WHEN 101 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_101
      WHEN 102 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_102
      WHEN 103 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_103
      WHEN 104 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_104
      WHEN 105 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_105
      WHEN 106 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_106
      WHEN 107 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_107
      WHEN 108 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_108
      WHEN 109 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_109
      WHEN 110 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_110
      WHEN 111 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_111
      WHEN 112 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_112
      WHEN 113 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_113
      WHEN 114 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_114
      WHEN 115 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_115
      WHEN 116 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_116
      WHEN 117 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_117
      WHEN 118 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_118
      WHEN 119 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_119
      WHEN 120 THEN REC_AVG_TARGETS_SEVERITY.ACCIDENT_AGE_120
      END;

--DBMS_OUTPUT.put_line(num);
INSERT INTO AVG_SEVERITY
  (AVG_SEVERITY_ID, AGE, SVRTY) VALUES
  (targetId, i, ageFactor);
  
END LOOP; 

END LOOP;
CLOSE CUR_AVG_TARGETS_SEVERITY;
  INSERT
INTO TMP_AVG_TARGETS_SEVERITY_ARCH
  SELECT * FROM TMP_AVG_TARGETS_SEVERITY WHERE FILE_NAME=fileName;
  
DELETE FROM TMP_AVG_TARGETS_SEVERITY WHERE  FILE_NAME = fileName;

--COMMIT;
Operation_Status:=1;
Exception 
WHEN OTHERS THEN
ROLLBACK;
Operation_Status:=-1;
END LOAD_AVG_TRGTS_SEVERITY;

PROCEDURE APPLY_AVG_RUNID (In_File_Name in varchar2,In_RunId in varchar2,UserId in varchar2,
Operation_Status out number)is  
BEGIN
Operation_Status:=0;

UPDATE AVG_ADJSTMNTS
SET RUN_ID=In_RunId
WHERE FILENAME = In_File_Name;

UPDATE AVG_ADJ_RUN
SET RUN_ID=In_RunId
,USR_ID=UserId
WHERE FILENAME = In_File_Name;

UPDATE RN_CNTRL_Q
SET RUNID=In_RunId
,DT_UPDT = SYSDATE
,UPDT_USR_ID = UserId
WHERE  FILENAME = In_File_Name;

--COMMIT;
Operation_Status:=1;
Exception 
WHEN OTHERS THEN
ROLLBACK;
Operation_Status:=-1;
END APPLY_AVG_RUNID;

PROCEDURE CLEAN_AVG_TRGTS_SVRTY (In_File_Name in varchar2,Operation_Status out number)is  
BEGIN
Operation_Status:=0;

INSERT
INTO AVG_TARGETS_ARCH
  (
    AVG_TARGETS_ID,
    FILE_ROW_NUM,
    FILENAME,
    RSK_SGMT_GRP,
    CMPNY_GRP,
    RT_STRCTR_GRP,
    CLM_SMBL_RT_ST_GRP,
    LOB_GRP,
    VHCL_TYP_GRP,
    YRS_INSRD_GRP,
    PRVT_PSNGR_GRP,
    TRGT,
    DT_UPDT
  )
SELECT AVG_TARGETS_ID,
  FILE_ROW_NUM,
  FILENAME,
  RSK_SGMT_GRP,
  CMPNY_GRP,
  RT_STRCTR_GRP,
  CLM_SMBL_RT_ST_GRP,
  LOB_GRP,
  VHCL_TYP_GRP,
  YRS_INSRD_GRP,
  PRVT_PSNGR_GRP,
  TRGT,
  SYSDATE
FROM AVG_TARGETS WHERE FILENAME=In_File_Name
ORDER BY AVG_TARGETS_ID,FILE_ROW_NUM;

INSERT
INTO AVG_SEVERITY_ARCH
  (
    AVG_SEVERITY_ID,
    AGE,
    SVRTY,
    DT_UPDT
  )
SELECT as1.AVG_SEVERITY_ID, as1.AGE, as1.SVRTY, SYSDATE FROM AVG_SEVERITY as1
WHERE EXISTS (SELECT 1 FROM AVG_TARGETS at1 WHERE at1.AVG_TARGETS_ID =as1.AVG_SEVERITY_ID
AND at1.FILENAME=In_File_Name
) order by as1.AVG_SEVERITY_ID,as1.AGE;

DELETE
FROM AVG_SEVERITY as1
WHERE EXISTS (SELECT 1 FROM AVG_TARGETS at1 WHERE at1.AVG_TARGETS_ID =as1.AVG_SEVERITY_ID
AND at1.FILENAME=In_File_Name);

DELETE
FROM AVG_TARGETS WHERE FILENAME=In_File_Name;


COMMIT;
Operation_Status:=1;
Exception 
WHEN OTHERS THEN
ROLLBACK;
Operation_Status:=-1;
END CLEAN_AVG_TRGTS_SVRTY;

END PKG_AVERAGE_RESERVE;
